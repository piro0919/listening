{"version":3,"sources":["components/templates/NotSupported/style.module.scss","components/templates/Top/style.module.scss","serviceWorkerRegistration.ts","reportWebVitals.ts","components/templates/NotSupported/index.tsx","components/templates/Top/index.tsx","containers/pages/index.tsx","containers/index.tsx","index.tsx"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","NotSupported","onlyHeight","useWindowHeight","style","useMemo","height","className","styles","wrapper","Top","isListening","onReset","onStart","onStop","text","texts","split","map","index","textWrapper","hearing","listening","buttonsWrapper","button","disabled","onClick","icon","Pages","SpeechRecognition","browserSupportsSpeechRecognition","startListening","stopListening","useSpeechRecognition","transcript","resetTranscript","handleStart","useCallback","a","continuous","language","replaceAll","Containers","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.0b276ebf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"style_wrapper__39bPv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textWrapper\":\"style_textWrapper__3hP-S\",\"hearing\":\"style_hearing__1G_ES\",\"listening\":\"style_listening__rSn1k\",\"buttonsWrapper\":\"style_buttonsWrapper__1K4dR\",\"icon\":\"style_icon__1evs6\",\"button\":\"style_button__26ibV\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { CSSProperties, useMemo } from \"react\";\nimport { useWindowHeight } from \"@react-hook/window-size\";\nimport styles from \"./style.module.scss\";\n\nfunction NotSupported() {\n  const onlyHeight = useWindowHeight();\n  const style = useMemo<CSSProperties>(\n    () => ({\n      height: `${onlyHeight}px`,\n    }),\n    [onlyHeight]\n  );\n\n  return (\n    <div className={styles.wrapper} style={style}>\n      <p>Browser doesn't support speech recognition.</p>\n    </div>\n  );\n}\n\nexport default NotSupported;\n","import React, { MouseEventHandler, useMemo } from \"react\";\nimport styles from \"./style.module.scss\";\nimport { MdPlayArrow, MdStop, MdReplay, MdHearing } from \"react-icons/md\";\nimport { IoMdSettings } from \"react-icons/io\";\n\nexport type TopProps = {\n  isListening: boolean;\n  onReset: MouseEventHandler<HTMLButtonElement>;\n  onStart: MouseEventHandler<HTMLButtonElement>;\n  onStop: MouseEventHandler<HTMLButtonElement>;\n  text: string;\n};\n\nfunction Top({ isListening, onReset, onStart, onStop, text }: TopProps) {\n  const texts = useMemo(\n    () => text.split(/\\n/).map((text, index) => <p key={index}>{text}</p>),\n    [text]\n  );\n\n  return (\n    <div>\n      <p className={styles.textWrapper}>{texts}</p>\n      <MdHearing\n        className={`${styles.hearing} ${isListening ? styles.listening : \"\"}`}\n      />\n      <div className={styles.buttonsWrapper}>\n        <button\n          className={styles.button}\n          disabled={isListening}\n          onClick={onStart}\n        >\n          <MdPlayArrow className={styles.icon} />\n          Start\n        </button>\n        <button\n          className={styles.button}\n          disabled={!isListening}\n          onClick={onStop}\n        >\n          <MdStop className={styles.icon} />\n          Stop\n        </button>\n        <button className={styles.button} onClick={onReset}>\n          <MdReplay className={styles.icon} />\n          Reset\n        </button>\n        {/* <button className={styles.button}>\n          <IoMdSettings className={styles.icon} />\n          Setting\n        </button> */}\n      </div>\n    </div>\n  );\n}\n\nexport default Top;\n","import NotSupported from \"components/templates/NotSupported\";\nimport Top from \"components/templates/Top\";\nimport React from \"react\";\nimport { useMemo } from \"react\";\nimport { useCallback } from \"react\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\n\nfunction Pages() {\n  const { browserSupportsSpeechRecognition, startListening, stopListening } =\n    useMemo(() => SpeechRecognition, []);\n  const { transcript, listening, resetTranscript } = useSpeechRecognition();\n  const handleStart = useCallback(async () => {\n    await startListening({ continuous: true, language: \"ja\" });\n  }, [startListening]);\n  const text = useMemo(() => transcript.replaceAll(\" \", \"\\n\"), [transcript]);\n\n  return browserSupportsSpeechRecognition() ? (\n    <Top\n      isListening={listening}\n      onReset={resetTranscript}\n      onStart={handleStart}\n      onStop={stopListening}\n      text={text}\n    />\n  ) : (\n    <NotSupported />\n  );\n}\n\nexport default Pages;\n","import React from \"react\";\nimport Pages from \"./pages\";\n\nfunction Containers() {\n  return <Pages />;\n}\n\nexport default Containers;\n","import \"./styles/global.scss\";\nimport \"ress\";\nimport React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Containers from \"containers\";\n\nReactDOM.render(\n  <StrictMode>\n    <Containers />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}